# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bookstore-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs18.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-south-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
         - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
         - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["BooksTable", "Arn"] }

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createBook:
    handler: src/handlers.createBook
    events:
      - httpApi:
          path: /book
          method: post
  getBook:
    handler: src/handlers.getBook
    events:
      - httpApi:
          path: /book/{id}
          method: get
  updateBook:
    handler: src/handlers.updateBook
    events:
      - httpApi:
          path: /book/{id}
          method: put
  deleteBook:
    handler: src/handlers.deleteBook
    events:
      - httpApi:
          path: /book/{id}
          method: delete
  listBook:
    handler: src/handlers.listBook
    events:
      - httpApi:
          path: /books
          method: get
#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
  - serverless-plugin-typescript
# you can add CloudFormation resource templates here
resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BooksTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: ISBN
            AttributeType: S
        KeySchema:
          - AttributeName: ISBN
            KeyType: HASH
